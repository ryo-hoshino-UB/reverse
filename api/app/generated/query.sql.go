// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package othello

import (
	"context"
	"database/sql"
)

const createGame = `-- name: CreateGame :execresult
INSERT INTO games (started_at) VALUES (NOW())
`

func (q *Queries) CreateGame(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createGame)
}

const createGameResult = `-- name: CreateGameResult :execresult
INSERT INTO game_results (game_id, winner_disc, end_at) 
VALUES (?, ?, NOW())
`

type CreateGameResultParams struct {
	GameID     int32
	WinnerDisc int32
}

func (q *Queries) CreateGameResult(ctx context.Context, arg CreateGameResultParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createGameResult, arg.GameID, arg.WinnerDisc)
}

const createMove = `-- name: CreateMove :execresult
INSERT INTO moves (turn_id, disc, x, y) 
VALUES (?, ?, ?, ?)
`

type CreateMoveParams struct {
	TurnID int32
	Disc   int32
	X      int32
	Y      int32
}

func (q *Queries) CreateMove(ctx context.Context, arg CreateMoveParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMove,
		arg.TurnID,
		arg.Disc,
		arg.X,
		arg.Y,
	)
}

const createSquare = `-- name: CreateSquare :execresult
INSERT INTO squares (turn_id, x, y, disc) 
VALUES (?, ?, ?, ?)
`

type CreateSquareParams struct {
	TurnID int32
	X      int32
	Y      int32
	Disc   int32
}

func (q *Queries) CreateSquare(ctx context.Context, arg CreateSquareParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSquare,
		arg.TurnID,
		arg.X,
		arg.Y,
		arg.Disc,
	)
}

const createTurn = `-- name: CreateTurn :execresult
INSERT INTO turns (game_id, turn_count, next_disc, end_at) 
VALUES (?, ?, ?, NOW())
`

type CreateTurnParams struct {
	GameID    int32
	TurnCount int32
	NextDisc  sql.NullInt32
}

func (q *Queries) CreateTurn(ctx context.Context, arg CreateTurnParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTurn, arg.GameID, arg.TurnCount, arg.NextDisc)
}

const getGameByID = `-- name: GetGameByID :one
SELECT id, started_at FROM games WHERE id = ?
`

func (q *Queries) GetGameByID(ctx context.Context, id int32) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGameByID, id)
	var i Game
	err := row.Scan(&i.ID, &i.StartedAt)
	return i, err
}

const getGameResultByGameID = `-- name: GetGameResultByGameID :one
SELECT id, game_id, winner_disc, end_at FROM game_results WHERE game_id = ?
`

func (q *Queries) GetGameResultByGameID(ctx context.Context, gameID int32) (GameResult, error) {
	row := q.db.QueryRowContext(ctx, getGameResultByGameID, gameID)
	var i GameResult
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.WinnerDisc,
		&i.EndAt,
	)
	return i, err
}

const getGameResultByID = `-- name: GetGameResultByID :one
SELECT id, game_id, winner_disc, end_at FROM game_results WHERE id = ?
`

func (q *Queries) GetGameResultByID(ctx context.Context, id int32) (GameResult, error) {
	row := q.db.QueryRowContext(ctx, getGameResultByID, id)
	var i GameResult
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.WinnerDisc,
		&i.EndAt,
	)
	return i, err
}

const getLatestGame = `-- name: GetLatestGame :one
SELECT id, started_at FROM games order by id desc limit 1
`

func (q *Queries) GetLatestGame(ctx context.Context) (Game, error) {
	row := q.db.QueryRowContext(ctx, getLatestGame)
	var i Game
	err := row.Scan(&i.ID, &i.StartedAt)
	return i, err
}

const getMoveByID = `-- name: GetMoveByID :one
SELECT id, turn_id, disc, x, y FROM moves WHERE id = ?
`

func (q *Queries) GetMoveByID(ctx context.Context, id int32) (Move, error) {
	row := q.db.QueryRowContext(ctx, getMoveByID, id)
	var i Move
	err := row.Scan(
		&i.ID,
		&i.TurnID,
		&i.Disc,
		&i.X,
		&i.Y,
	)
	return i, err
}

const getMoveByTurnID = `-- name: GetMoveByTurnID :one
SELECT id, turn_id, disc, x, y FROM moves WHERE turn_id = ?
`

func (q *Queries) GetMoveByTurnID(ctx context.Context, turnID int32) (Move, error) {
	row := q.db.QueryRowContext(ctx, getMoveByTurnID, turnID)
	var i Move
	err := row.Scan(
		&i.ID,
		&i.TurnID,
		&i.Disc,
		&i.X,
		&i.Y,
	)
	return i, err
}

const getSquareByID = `-- name: GetSquareByID :one
SELECT id, turn_id, x, y, disc FROM squares WHERE id = ?
`

func (q *Queries) GetSquareByID(ctx context.Context, id int32) (Square, error) {
	row := q.db.QueryRowContext(ctx, getSquareByID, id)
	var i Square
	err := row.Scan(
		&i.ID,
		&i.TurnID,
		&i.X,
		&i.Y,
		&i.Disc,
	)
	return i, err
}

const getSquaresByTurnID = `-- name: GetSquaresByTurnID :many
SELECT id, turn_id, x, y, disc FROM squares WHERE turn_id = ?
`

func (q *Queries) GetSquaresByTurnID(ctx context.Context, turnID int32) ([]Square, error) {
	rows, err := q.db.QueryContext(ctx, getSquaresByTurnID, turnID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Square
	for rows.Next() {
		var i Square
		if err := rows.Scan(
			&i.ID,
			&i.TurnID,
			&i.X,
			&i.Y,
			&i.Disc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTurnByGameIDAndTurnCount = `-- name: GetTurnByGameIDAndTurnCount :one
SELECT id, game_id, turn_count, next_disc, end_at FROM turns WHERE game_id = ? and turn_count = ?
`

type GetTurnByGameIDAndTurnCountParams struct {
	GameID    int32
	TurnCount int32
}

func (q *Queries) GetTurnByGameIDAndTurnCount(ctx context.Context, arg GetTurnByGameIDAndTurnCountParams) (Turn, error) {
	row := q.db.QueryRowContext(ctx, getTurnByGameIDAndTurnCount, arg.GameID, arg.TurnCount)
	var i Turn
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.TurnCount,
		&i.NextDisc,
		&i.EndAt,
	)
	return i, err
}

const getTurnByID = `-- name: GetTurnByID :one
SELECT id, game_id, turn_count, next_disc, end_at FROM turns WHERE id = ?
`

func (q *Queries) GetTurnByID(ctx context.Context, id int32) (Turn, error) {
	row := q.db.QueryRowContext(ctx, getTurnByID, id)
	var i Turn
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.TurnCount,
		&i.NextDisc,
		&i.EndAt,
	)
	return i, err
}

const listGameResults = `-- name: ListGameResults :many
SELECT id, game_id, winner_disc, end_at FROM game_results
`

func (q *Queries) ListGameResults(ctx context.Context) ([]GameResult, error) {
	rows, err := q.db.QueryContext(ctx, listGameResults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameResult
	for rows.Next() {
		var i GameResult
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.WinnerDisc,
			&i.EndAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGames = `-- name: ListGames :many
SELECT id, started_at FROM games
`

func (q *Queries) ListGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, listGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(&i.ID, &i.StartedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMoves = `-- name: ListMoves :many
SELECT id, turn_id, disc, x, y FROM moves
`

func (q *Queries) ListMoves(ctx context.Context) ([]Move, error) {
	rows, err := q.db.QueryContext(ctx, listMoves)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Move
	for rows.Next() {
		var i Move
		if err := rows.Scan(
			&i.ID,
			&i.TurnID,
			&i.Disc,
			&i.X,
			&i.Y,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSquares = `-- name: ListSquares :many
SELECT id, turn_id, x, y, disc FROM squares
`

func (q *Queries) ListSquares(ctx context.Context) ([]Square, error) {
	rows, err := q.db.QueryContext(ctx, listSquares)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Square
	for rows.Next() {
		var i Square
		if err := rows.Scan(
			&i.ID,
			&i.TurnID,
			&i.X,
			&i.Y,
			&i.Disc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTurns = `-- name: ListTurns :many
SELECT id, game_id, turn_count, next_disc, end_at FROM turns
`

func (q *Queries) ListTurns(ctx context.Context) ([]Turn, error) {
	rows, err := q.db.QueryContext(ctx, listTurns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Turn
	for rows.Next() {
		var i Turn
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.TurnCount,
			&i.NextDisc,
			&i.EndAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

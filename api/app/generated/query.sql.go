// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package othello

import (
	"context"
)

const createGame = `-- name: CreateGame :exec
INSERT INTO games (started_at) VALUES (NOW())
`

func (q *Queries) CreateGame(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createGame)
	return err
}

const createGameResult = `-- name: CreateGameResult :exec
INSERT INTO game_results (game_id, winner_disc, end_at) 
VALUES ($1, $2, NOW())
`

func (q *Queries) CreateGameResult(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createGameResult)
	return err
}

const createMove = `-- name: CreateMove :exec
INSERT INTO moves (turn_id, disc, x, y) 
VALUES ($1, $2, $3, $4)
`

func (q *Queries) CreateMove(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createMove)
	return err
}

const createSquare = `-- name: CreateSquare :exec
INSERT INTO squares (turn_id, x, y, disc) 
VALUES ($1, $2, $3, $4)
`

func (q *Queries) CreateSquare(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createSquare)
	return err
}

const createTurn = `-- name: CreateTurn :exec
INSERT INTO turns (game_id, turn_count, next_disc, end_at) 
VALUES ($1, $2, $3, NOW())
`

func (q *Queries) CreateTurn(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createTurn)
	return err
}

const listGameResults = `-- name: ListGameResults :many
SELECT id, game_id, winner_disc, end_at FROM game_results
`

func (q *Queries) ListGameResults(ctx context.Context) ([]GameResult, error) {
	rows, err := q.db.QueryContext(ctx, listGameResults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameResult
	for rows.Next() {
		var i GameResult
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.WinnerDisc,
			&i.EndAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGames = `-- name: ListGames :many
SELECT id, started_at FROM games
`

func (q *Queries) ListGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, listGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(&i.ID, &i.StartedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMoves = `-- name: ListMoves :many
SELECT id, turn_id, disc, x, y FROM moves
`

func (q *Queries) ListMoves(ctx context.Context) ([]Move, error) {
	rows, err := q.db.QueryContext(ctx, listMoves)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Move
	for rows.Next() {
		var i Move
		if err := rows.Scan(
			&i.ID,
			&i.TurnID,
			&i.Disc,
			&i.X,
			&i.Y,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSquares = `-- name: ListSquares :many
SELECT id, turn_id, x, y, disc FROM squares
`

func (q *Queries) ListSquares(ctx context.Context) ([]Square, error) {
	rows, err := q.db.QueryContext(ctx, listSquares)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Square
	for rows.Next() {
		var i Square
		if err := rows.Scan(
			&i.ID,
			&i.TurnID,
			&i.X,
			&i.Y,
			&i.Disc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTurns = `-- name: ListTurns :many
SELECT id, game_id, turn_count, next_disc, end_at FROM turns
`

func (q *Queries) ListTurns(ctx context.Context) ([]Turn, error) {
	rows, err := q.db.QueryContext(ctx, listTurns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Turn
	for rows.Next() {
		var i Turn
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.TurnCount,
			&i.NextDisc,
			&i.EndAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
